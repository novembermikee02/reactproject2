[{"D:\\reactproject2\\src\\reportWebVitals.js":"1","D:\\reactproject2\\src\\index.js":"2","D:\\reactproject2\\src\\App.js":"3","D:\\reactproject2\\src\\component\\Demoform.jsx":"4","D:\\reactproject2\\src\\component\\DemoForm.jsx":"5","D:\\reactproject2\\src\\component\\Color.jsx":"6","D:\\reactproject2\\src\\component\\FetchApiExample.jsx":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":543,"mtime":1606458250168,"results":"10","hashOfConfig":"9"},{"size":249,"mtime":1606389805212,"results":"11","hashOfConfig":"9"},{"size":229,"mtime":1606304068282,"results":"12","hashOfConfig":"9"},{"size":4500,"mtime":1606384907862,"results":"13","hashOfConfig":"9"},{"size":1172,"mtime":1606388419599,"results":"14","hashOfConfig":"9"},{"size":2703,"mtime":1606458277425,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k1s6x7",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"D:\\reactproject2\\src\\reportWebVitals.js",[],"D:\\reactproject2\\src\\index.js",[],"D:\\reactproject2\\src\\App.js",[],"D:\\reactproject2\\src\\component\\Demoform.jsx",[],"D:\\reactproject2\\src\\component\\DemoForm.jsx",[],"D:\\reactproject2\\src\\component\\Color.jsx",[],"D:\\reactproject2\\src\\component\\FetchApiExample.jsx",["31","32","33"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Card,Image,Icon } from 'semantic-ui-react';\r\nimport './FetchApiExample.css';\r\n\r\nfunction FetchApiExample() {\r\n  // const [state, setstate] = useState(initialState)\r\n\r\n  const [name, setName] = useState('');\r\n  const [userName, setUsername] = useState('');\r\n  const [followers, setFollowers] = useState('');\r\n  const [following, setFollowing] = useState('');\r\n  const [repos, setRepos] = useState('');\r\n  const [avatar, setAvatar] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n  const [error, setError] = useState(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/users/example\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        // console.log(data);\r\n        setData(data)\r\n      });\r\n  }, []);\r\n\r\n  // set the data\r\n  const setData = ({name , login, followers, following, public_repos, avatar_url}) => {\r\n    setName(name);\r\n    setUsername(login);\r\n    setFollowers(followers);\r\n    setFollowing(following);\r\n    setRepos(public_repos);\r\n    setAvatar(avatar_url);\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    setUserInput(e.target.value)\r\n  }\r\n  const handleSubmit = () => {\r\n    fetch(`https://api.github.com/users/${userInput}`)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      if (data.message) {\r\n        setError(data.message)\r\n      } else{\r\n        setData(data);\r\n        setError(null);\r\n      } \r\n    }); \r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"navbar\">Github Search</div>\r\n      <div className=\"search\">\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Input placeholder='Github User' name='github user' onChange={handleSearch} />\r\n            <Form.Button content='Search' />\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n      {error ? (<h1>{error}</h1>) : (<div className=\"card\">\r\n        <Card>\r\n          <Image src={avatar} wrapped ui={false} />\r\n          <Card.Content>\r\n            <Card.Header>{name} </Card.Header>\r\n            <Card.Header>{userName} </Card.Header>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <a>\r\n              <Icon name='user' />\r\n              {followers} followers\r\n            </a>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <a>\r\n              <Icon name='user' />\r\n              {repos} Repos\r\n            </a>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <a>\r\n              <Icon name='user' />\r\n              {following} following\r\n            </a>\r\n          </Card.Content>\r\n        </Card>\r\n      </div>)}\r\n      \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FetchApiExample\r\n",{"ruleId":"34","severity":1,"message":"35","line":73,"column":13,"nodeType":"36","endLine":73,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":79,"column":13,"nodeType":"36","endLine":79,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":85,"column":13,"nodeType":"36","endLine":85,"endColumn":16},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]